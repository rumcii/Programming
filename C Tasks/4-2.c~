/*Exercise 4-2. Extend atof to handle scientific notation of the form*/
/*123.45e-6*/
/*where a floating-point number may be followed by e or E and an optionally signed exponent.*/

#include <stdio.h>

#define MAX 1000

double atof(char []);
int isSpace(char);
int isDigit(char);
int isLetter(char);
int isOther(char);
int getline(char [], int);

main()
{
    char line[MAX];
    int i = 1;
    
    while (getline(line, MAX) > 0) {
        printf("%f\n", atof(line));
    }
}

int isDigit(char n)
{
    if (n >= '0' && n <= '9') {
        return 1;
    }
    
    return 0;
}

int isSpace(char n)
{
    if (n == ' ' || n == '\n' || n == '\t') {
        return 1;
    }
    
    return 0;
}

int isLetter(char n)
{
    if (n >= 'a' && n <= 'z' || n >= 'A' && n <= 'Z') {
        return 1;
    }
    
    return 0;
}

int isOther(char n)
{
    if (!isDigit(n) || !isLetter(n) || !isSpace(n) || n != '.' || n != '-') {
        return 1;
    }
    
    return 0;
}

double atof(char arr[])
{
    int i;
    int sign;
    double power;
    double result;
    
    for (i = 0; isSpace(arr[i]) || isLetter(arr[i]) || isOther(arr[i]); i++) {
        ;
    }
    
    sign = (arr[i] == '-') ? -1:1;
    
    if (arr[i] == '+' || arr[i] == '-') {
        i++;
    }
    
    for (result = 0.0; isDigit(arr[i]); i++) {
        result = result * 10.0 + arr[i] - '0';
    }
    
/*    if (arr[i] == 'e') {*/
/*        result *= 10 + 'e';*/
/*    }*/
/*    */
/*    if (arr[i] == '-') {*/
/*        result *= 10 + '-';*/
/*    }*/
    
    if (arr[i] == '.') {
        i++;
    }
    
    for (power = 1.0; isDigit(arr[i]); i++) {
        result = result * 10.0 + arr[i];
        power *= 10.0;
    }
    
    return (sign * result) / power;
}

int getline(char arr[], int length)
{
    int i = 0;
    int c;
    
    while ((c = getchar()) != EOF && c != '\n' && i < length - 1) {
        arr[i++] = c;
    }
    
    if (c == '\n') {
        arr[i++] = c;
    }
    
    arr[i] = '\0';
    
    return i;
}
